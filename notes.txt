







TODO custom type errors.  

data ErrorMessage
 = Text Symbol
 | forall t. ShowType t
 | ErrorMessage :<>: ErrorMessage
 | ErrorMessage :$$: ErrorMessage







https://kseo.github.io/posts/2017-01-16-type-level-functions-using-closed-type-families.html

type family Fmap (f :: k -> j) (xs :: [k]) :: [j] where
   Fmap f '[]       = '[]
   Fmap f (x ': xs) = f x ': Fmap f xs

type family Pair (x :: *) where
  Pair x = (x, x)

Î»> :kind! Fmap Pair [Char,Bool,Int]
:: [*]
= '[(Char, Char), (Bool, Bool), (Int, Int)]





--------------------------------------------------------------------------------
Older Versions, including their problems 

{-




applyRecord
  :: forall p f g as bs.
     ( 
     )
  => (forall x y. p x y -> f x -> g y)
  -> URecord_ p (ZipTypes as bs) -> Record_ f as -> Record_ g bs
applyRecord u = \case
  R                         -> \R               -> R
  (Field (Uncurry p) :* ps) -> \(Field a :* as) -> u p a :* applyRecord u ps as



  :: (forall x  .     f x  ->     g x  ->     h x)
  -> (forall xs . Rec f xs -> Rec g xs -> Rec h xs)



applyRecord
  :: ( as ~ GetInputs  abs
     , bs ~ GetOutputs abs
     )
  => (forall x y. p x y -> f x -> g y)
  -> URecord_ p abs -> Record_ f as -> Record_ g bs
applyRecord = todo





-- {-# LANGUAGE AllowAmbiguousTypes #-}




  -- showRecord 
--   :: (AllTypes Show as, Show1 f) 
--   => (Record cs f as) -> String
-- showRecord r = showShowableRecord (reifyConstraint cShow r)
--    where
--    cShow = P @Show  -- P @(Type -> Constraint) @Show

-- showShowableRecord 
--   :: forall f cs as. (Show1 f) 
--   => Record (Show ': cs) f as 
--   -> String
-- showShowableRecord 
--   = mapRecord _show
--   > recordToList > (<> ["R"])
--   > intercalate " :* "
--   where
--   _show :: forall k. forall a.
--            Field k (Show ': cs) f          a 
-- --      -> Field k (Show ': cs) (C String) a
--         -> Field k cs           (C String) a
--   _show f@(Field{}) = f & showField > cfield @k

-- showRecord 
--   :: (AllTypes Show as, Show1 f) 
--   => (Record cs f as) -> String
-- showRecord r = showShowableRecord (reifyConstraint cShow r)
--    where
--    cShow = P @Show -- P @(Type -> Constraint) @Show
-- -- the polykinded Proxy needs the kind first!

-- showShowableRecord 
--   :: (Show1 f) 
--   => Record (Show ': cs) f as 
--   -> String
-- showShowableRecord = rmap _show > recordToList > intercalate " :* " --  > rmap f2c
--   where
--   _show x = C $ show1 x


  -- > intercalate id
  -- > foldl (<>) mempty -- NO fold/foldr had the incorrect associativity; foldl doesn't work either 
  -- > mconcat
  -- > fmap ($"") > mconcat > s 
  -- > fmap ($"") > mconcat > s -- doesn't work, its just like show


-- -- instance (Show `In` cs) => Show (Record cs f as) where
-- instance (AllTypes Show as) => Show (Record cs f as) where
--   show = showRecord



instance (Show (f a)) => Show (Field k cs f a) where
  show = showField 

showField :: (Show (f a)) => Field k cs f a -> String 
showField f@(Field x) = "Field @" <> k <> " (" <> v <> ")"
   where
   k = reifyFieldName f
   v = show x
-- Field k (Show ': cs) f a -> String 



-- :: (forall x k. Field k (c ': cs) f x -> Field k (c ': cs) g x)



constrain = reifyConstraint (P @c) > loosenConstraints

loosenConstraints
  :: (ds `Subset` cs) 
  => Record cs f kvs
  -> Record ds f kvs
loosenConstraints

constrain 
  :: forall (c :: * -> Constraint).
     forall cs f kvs. 
     ( AllTypes c kvs
     )
  => Record (     cs) f kvs
  -> Record (c ': cs) f kvs
constrain = reifyConstraint (P @c)



data Dictionary c a where
  Dictionary :: c a => a -> Dict c a
data Dictionary0 c a where
    Dictionary0 :: c a => a -> Dict c a
data Dictionary1 c a where
  Dictionary1 :: c a => a -> Dict c a

type family AllSatisfied cs t :: Constraint where
    AllSatisfied '[]       t = ()
    AllSatisfied (c ': cs) t = (c t, AllSatisfied cs t)

data Constrained c a where
    Constrained :: forall c a. 
                ( c a
                ) 
                => !a 
                -> Constrained c a 

data Constrained' c k f a where
    Constrained' :: forall c k f a. 
                ( c a
                , KnownSymbol k
                ) 
                => !(f a) 
                -> Constrained' c k f a 
  where 
  go :: PField_ k a
  go = Field Proxy 
   R -> R 
   (x :* xs) ->



-- dictionaryRecord 
--   :: forall constraint fields. 
--      ( RecordApplicative fields
--      , AllTypes constraint fields 
--      ) 
--   => DRecord fields 
-- dictionaryRecord = constrain @constraint (rPure Proxy) 

-- {-| a record where each field is constructed 
-- from the methods of some class.

-- -}
-- methodRecord 
--   :: forall c fields f.  
--      ( AllTypes c fields
--      , RecordApplicative fields
--      )
--   => (forall x. (c x) => f x)
--   -> Record_ f fields 
-- methodRecord u = methodRecord' go
--   where
--   go :: forall x. Dictionary (c x) -> f x
--   go = (\d -> withDict d u) 


(Proxy @(k -> Constraint) @constraint))   

  -- = proxyRecord @fields 
  -- & constrained @c
  -- & dropConstraints 
  -- & mapRecordFunctors u


    :: (forall x. Field k cs f x)
    -> Record cs f kvs


instance ( KnownSymbol k
         , AllSatisfied cs v
         , RecordApplicative kvs
         ) 
       => RecordApplicative ('(k,v) ': kvs) 
  where
  rPure s = field s :* rPure s
  {-# INLINE rPure #-}


constrainedRecord 
  :: ( RecordApplicative fields
     , AllTypes constraint fields 
     ) 
  => PRecord (constraint ': cs) fields 
constrainedRecord = rPure Proxy 


-- reifyKey :: forall k. forall cs f a. Field k cs f a -> String 
-- reifyKey Field{} = symbolVal (P @k)


-- (***) :: forall k cs a fields. 
--      (KnownSymbol k, AllSatisfied cs a) 
--      => a 
--      -> Record cs Identity            fields
--      -> Record cs Identity ('(k,a) ': fields)
-- x *** xs = Field (Identity x) :* xs


{-| 

@ 
'Field' :: ("" ':::' )
@ 

NOTE if you mistype (k :: v) i.e. a type/kind signature, 
instead of (k ::: v) i.e. an application of this type constructor, 
you may get this error message: 

@
    Variable `v' used as both a kind and a type
    Did you intend to use TypeInType?
@

-}
data (:::) (k :: Symbol) (v :: *) :: * where
  Field :: KnownSymbol k => !v -> (k ::: v) 
deriving instance Functor ((:::) k)

type Field = (:::)

{-| note 

if you mistype (k :: v) i.e. a type/kind signature, instead of (k ::: v) i.e. the applied type constructor, 
you may get this error message: 

    Variable `v' used as both a kind and a type
    Did you intend to use TypeInType?

-}

reifyFieldName :: forall k v. (k ::: v) -> String 
reifyFieldName Field{} = symbolVal (Proxy :: Proxy k)

-- reifyFieldName :: forall k v. (k ::: v) -> String 
-- reifyFieldName Field{} = symbolVal (Proxy :: Proxy k)

{-| 

@
GetName ("" ':::' )  ~  "" 
@

-}
type family GetName field :: Symbol where 
  GetName (s ::: _a) = s 

{-| 

@
GetType ("" ':::' )  ~  
@ 

-}
type family GetType field :: * where 
  GetType (_s ::: a) = a 

{-| 

@ 
field @"" 
@

-}
field :: forall s a. KnownSymbol s => a -> Field s a
field = Field 

{-| 

-}
type Record = Rec Identity -- Field 

-- type ProxyRecord = Rec ProxyField 

type ProxyField s a = Field s (Proxy a)
-- type ProxyField s a = Proxy (Field s a) 

{-| if we can parse each field in a record, then we can parse the record itself. 

-}
type RecordParser = Rec FieldParser

{-| like 'ElField' `Compose`d with a @`Dict` `KnownSymbol`@. 

-}
data FieldParser a 
  = FieldParser Text (JSONParser a)
  deriving (Functor)

-- data FieldParser s a 
--   = FieldParser Text (JSONParser (s ::: a))
--   deriving (Functor)

{-| 

-}
type JSONParser a = (Value -> Parser a) 

{-| constrain each field name in a record with the first constraint @ck@ (frequently, `KnownSymbol`), 
and constrain each field type in that record with the second constraint @cv@. 

for example, 

@
(AllFields KnownSymbol Show \'["enabled" ::: Bool, "setting" ::: String]) => ...
@ 

is equivalent to 

@
(KnownSymbol "enabled", KnownSymbol "setting", Show Bool, Show String) => ... 
@ 

which says that the field names must be type-level strings, 
and that the field types must all be showable.

thus, a generic record function with this constraint can print out the key-value pairs 
of any input record that satisfies those constraints:

@
showRecord :: (AllFields KnownSymbol Show fields) => 'Record' fields -> String 
showRecord RNil      = ...
showRecord (a :& as) = ... 
@

-}
type AllFields cName cType fields = (AllNames cName fields, AllTypes cType fields)

type AllNames c fields = AllConstrained c (GetNames fields)
type AllTypes c fields = AllConstrained c (GetTypes fields)

-- | a type level @fmap fst@
type family GetNames fields where 
  GetNames '[]                    = '[] 
  GetNames ((k ::: _v) ': fields) = k ': GetNames fields 

-- | a type level @fmap snd@
type family GetTypes fields where 
  GetTypes '[]                    = '[] 
  GetTypes ((_k ::: v) ': fields) = v ': GetTypes fields 

type family PairFromField fields :: (Symbol, *) where 
  PairFromField (k ::: v) = '(k, v)
  
type family PairsFromFields fields :: [(Symbol, *)] where 
  PairsFromFields '[]               = '[] 
  PairsFromFields (field ': fields) = PairFromField field ': PairsFromFields fields  

type List = ([]) 

z :: Record '[] 
z = RNil 


{-| 

Build a record whose fields are derived solely from a
pair of constraints satisfied by each key-value pair.

-}

--------------------------------------------------------------------------------

defaultRecordParser 
  :: 
     ( AllFields KnownSymbol FromJSON fields 
     ) 
  => RecordParser fields 
defaultRecordParser = todo 

parseJSONField 
  :: ( FromJSON    v
     ) 
  =>             (k :::  Proxy v) -- ProxyField k v
  -> FieldParser (k :::        v) -- FieldParser (Field k v)    
parseJSONField kv@Field{} = FieldParser keyName keyParser
  where 
  keyName   = reifyFieldName kv & T.pack 
  keyParser = fmap Field <$> parseJSON -- genericParseJSON defaultOptions 

defaultFieldParser
  :: forall k v. 
     ( FromJSON    v
     , KnownSymbol k
     ) 
  => FieldParser (k ::: v) 
defaultFieldParser = FieldParser keyName valueParser
  where 
  keyName     = symbolVal (Proxy :: Proxy k) & T.pack 
  valueParser = fmap Field <$> parseJSON

-- fromFieldParser :: FieldParser k v -> Parser (Field k v)
-- fromFieldParser = todo 

-- {-| 

-- similar to:

-- @
-- :: Rec (JSONParser ':.' 'Field') kvs -> JSONParser (Rec Field kvs)
-- @

-- which has the shape of a 'rtraverse':

-- @
-- :: (Applicative m, Functor f) => Rec (m :. f) kvs -> m (Rec f kvs)
-- @

-- -}
-- objectParseJSON
--   :: Rec JSONFieldParser kvs
--   -> JSONParser (Rec Field kvs)
-- objectParseJSON RNil                           _ = pure RNil
-- objectParseJSON (kv@(JSONFieldParser p) :& ps) v = 
--       (:&) 
--   <$> (Field <$> withObject "<record>" (\o -> explicitParseField p o k) v)  
--   <*> objectParseJSON ps v 
--   where 
--   k = reifyFieldName kv & T.pack 

-- maybe "<record>" id $ mName 

--------------------------------------------------------------------------------

{-


data Record :: (functor :: Symbol -> Type -> Type) 
               (fields  :: [(Symbol,Type)])
            -> * where

    RNil :: Record f '[]
    (:*) :: !(f k a) -> !(Record f fields) -> Record f ('(k,a) ': fields)


    data Record :: (functor :: Symbol -> Type -> Type) 
               (fields  :: [(Symbol,Type)])
            -> Type
    where

    Record :: Record f '[]

    (:*)   :: !(f k a) 
           -> !(Record f fields) 
           -> Record f ('(k,a) ': fields)


-------------------------------------------------------------------------------

the unquantified variable is ignored.

> :t dog_TypeApplications

error:
    * No instance for (Show
                         (Record
                            Data.Functor.Identity.Identity
'['(k10, [Char]), '(k20, Int)]))
        arising from a use of `print'
    * In a stmt of an interactive GHCi command: print it
*Vinyl.Fields.Example> :t dog_TypeApplications
dog_TypeApplications
  :: (GHC.TypeLits.KnownSymbol k1, GHC.TypeLits.KnownSymbol k2) =>
     Record Data.Functor.Identity.Identity '['(k1, [Char]), '(k2, Int)]

-------------------------------------------------------------------------------

{-| uses `-XTypeApplications`.

TODO AllowAmbiguousTypes

@
>>> :set -XTypeApplications
>>> :set -XDataKinds
>>> dog = field @"name" "loki" :* field @"age" 7 :* R
@

-}
field :: forall k a. (KnownSymbol k) => a -> a
field = id

ERROR

C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Types.hs:85:10-46: error:
    * Could not deduce (KnownSymbol k0)
      from the context: KnownSymbol k
        bound by the type signature for:
                   field :: forall (k :: Symbol) a. KnownSymbol k => a -> a
        at C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Types.hs:85:10-46
      The type variable `k0' is ambiguous
    * In the ambiguity check for `field'
      To defer the ambiguity check to use sites, enable AllowAmbiguousTypes
      In the type signature:
        field :: forall k a. (KnownSymbol k) => a -> a
   |


-------------------------------------------------------------------------------

(-:) :: forall k a. (KnownSymbol k) => Label k -> a -> a
(-:) _ = id
-- NOTE the proxy must be concrete for the inference of IsLabel

-- | like 'Proxy' for 'Symbols'. 
data Label k where Label :: (KnownSymbol k) => Label k

instance (KnownSymbol k) => IsLabel k (Label k) where
    fromLabel = Label
          
ERROR:

C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Example.hs:34:25-29: error:
    * Could not deduce (GHC.OverloadedLabels.IsLabel "name" (Label k0))
        arising from the overloaded label `#name'
      from the context: GHC.TypeLits.KnownSymbol k
        bound by the inferred type of
                 dog_XOverloadedLabels :: GHC.TypeLits.KnownSymbol k =>
                                          Record [] '['(k, Char)]
        at C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Example.hs:34:1-44
      The type variable `k0' is ambiguous
      These potential instance exist:
        instance GHC.TypeLits.KnownSymbol k =>
                 GHC.OverloadedLabels.IsLabel k (Label k)
          -- Defined at C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Types.hs:145:10
    * In the first argument of `(-:)', namely `#name'
      In the first argument of `(:*)', namely `#name -: "loki"'
      In the expression: #name -: "loki" :* R
   |
C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Example.hs:34:25-39: error:
    * Could not deduce (GHC.TypeLits.KnownSymbol k0)
        arising from a use of `-:'
      from the context: GHC.TypeLits.KnownSymbol k
        bound by the inferred type of
                 dog_XOverloadedLabels :: GHC.TypeLits.KnownSymbol k =>
                                          Record [] '['(k, Char)]
        at C:\Users\Spiros\haskell\vinyl-fields\sources\Vinyl\Fields\Example.hs:34:1-44
      The type variable `k0' is ambiguous
    * In the first argument of `(:*)', namely `#name -: "loki"'
      In the expression: #name -: "loki" :* R
      In an equation for `dog_XOverloadedLabels':
          dog_XOverloadedLabels = #name -: "loki" :* R


-} -}

--------------------------------------------------------------------------------